AWSTemplateFormatVersion: 2010-09-09
Description: Sample ECS service

Parameters:
  ClusterName:
    Description: Cluster name
    Type: String
    AllowedPattern: "^ecs-workshop-user-[0-9]+$"
  ServiceImage:
    Description: Docker image of service to be deployed
    Type: String
    Default: nginxdemos/hello
  ServiceImageVersion:
    Description: Version of service to be deployed
    Type: String
    Default: 0.2
  DesiredCount:
    Description: Number of tasks to launch for the service
    Type: Number
    Default: 3
    MinValue: 2

Resources:
  HelloServiceTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: HelloService
          Image: !Sub "${ServiceImage}:${ServiceImageVersion}"
          PortMappings:
            - ContainerPort: 80
          Cpu: 256
          Memory: 1024
          MemoryReservation: 512
          Essential: true
      Family: hello
      NetworkMode: bridge

  HelloService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref ClusterName
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 60
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: HelloService
          ContainerPort: 80
          TargetGroupArn: !Ref HelloServiceTargetGroup
      PlacementStrategies:
        - Field: attribute:ecs.availability-zone
          Type: spread
      SchedulingStrategy: REPLICA
      ServiceName: HelloService
      TaskDefinition: !Ref HelloServiceTaskDefinition

  # Public load balancer, hosted in public subnets that is accessible
  # to the public, and is intended to route traffic to one or more public
  # facing services. This is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  HelloServiceLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        # The load balancer is placed into the public subnets, so that traffic
        # from the internet can reach the load balancer directly via the internet gateway
        - Fn::ImportValue: ecsworkshop:PublicSubnetOne
        - Fn::ImportValue: ecsworkshop:PublicSubnetTwo
        - Fn::ImportValue: ecsworkshop:PublicSubnetThree
      SecurityGroups:
        - Fn::ImportValue: ecsworkshop:PublicLoadBalancerSG

  # A dummy target group is used to setup the ALB to just drop traffic
  # initially, before any real service target groups have been added.
  HelloServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200-299"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId:
        Fn::ImportValue: ecsworkshop:VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "5"
        - Key: slow_start.duration_seconds
          Value: "60"

  HelloServiceListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref HelloServiceTargetGroup
          Type: forward
      LoadBalancerArn: !Ref HelloServiceLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  Url:
    Description: Service URL
    Value: !GetAtt HelloServiceLoadBalancer.DNSName
