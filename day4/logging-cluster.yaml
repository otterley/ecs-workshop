AWSTemplateFormatVersion: 2010-09-09
Description: Create ECS cluster

Parameters:
  ClusterName:
    Description: Cluster name
    Type: String
    AllowedPattern: "^ecs-workshop-user-[0-9]+$"
  EC2InstanceType:
    Type: String
    # We need these to be xlarge so we don't run out of ENIs
    Default: t3a.xlarge
    Description: EC2 instance type
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
    Description: EC2 AMI ID
  ClusterSize:
    Type: Number
    Default: 3
    Description: Number of EC2 instances comprising the ECS cluster

Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref ClusterName

  # Launch configuration for EC2 instances
  ContainerInstanceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile:
        Fn::ImportValue: ecsworkshop:EcsInstanceProfile
      ImageId: !Ref ImageId
      InstanceMonitoring: true
      InstanceType: !Ref EC2InstanceType
      SecurityGroups:
        - Fn::ImportValue: ecsworkshop:InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="==BOUNDARY=="
          MIME-Version: 1.0

          --==BOUNDARY==
          Content-Type: text/x-shellscript; charset="us-ascii"
          #!/usr/bin/env bash
          # Install awslogs and the jq JSON parser
          yum install -y awslogs jq

          # Inject the CloudWatch Logs configuration file contents
          cat > /etc/awslogs/awslogs.conf <<- EOF
          [general]
          state_file = /var/lib/awslogs/agent-state

          [/var/log/dmesg]
          file = /var/log/dmesg
          log_group_name = /var/log/dmesg
          log_stream_name = {cluster}/{container_instance_id}

          [/var/log/messages]
          file = /var/log/messages
          log_group_name = /var/log/messages
          log_stream_name = {cluster}/{container_instance_id}
          datetime_format = %b %d %H:%M:%S

          [/var/log/ecs/ecs-init.log]
          file = /var/log/ecs/ecs-init.log
          log_group_name = /var/log/ecs/ecs-init.log
          log_stream_name = {cluster}/{container_instance_id}
          datetime_format = %Y-%m-%dT%H:%M:%SZ

          [/var/log/ecs/ecs-agent.log]
          file = /var/log/ecs/ecs-agent.log.*
          log_group_name = /var/log/ecs/ecs-agent.log
          log_stream_name = {cluster}/{container_instance_id}
          datetime_format = %Y-%m-%dT%H:%M:%SZ

          [/var/log/ecs/audit.log]
          file = /var/log/ecs/audit.log.*
          log_group_name = /var/log/ecs/audit.log
          log_stream_name = {cluster}/{container_instance_id}
          datetime_format = %Y-%m-%dT%H:%M:%SZ

          EOF

          --==BOUNDARY==
          Content-Type: text/x-shellscript; charset="us-ascii"
          #!/usr/bin/env bash
          # Write the awslogs bootstrap script to /usr/local/bin/bootstrap-awslogs.sh
          cat > /usr/local/bin/bootstrap-awslogs.sh <<- 'EOF'
          #!/usr/bin/env bash
          exec 2>>/var/log/ecs/cloudwatch-logs-start.log
          set -x

          until curl -s http://localhost:51678/v1/metadata
          do
            sleep 1
          done

          # Set the region to send CloudWatch Logs data to (the region where the container instance is located)
          cp /etc/awslogs/awscli.conf /etc/awslogs/awscli.conf.bak
          region=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
          sed -i -e "s/region = .*/region = $region/g" /etc/awslogs/awscli.conf

          # Grab the cluster and container instance ARN from instance metadata
          cluster=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .Cluster')
          container_instance_id=$(curl -s http://localhost:51678/v1/metadata | jq -r '. | .ContainerInstanceArn' | awk -F/ '{print $2}' )

          # Replace the cluster name and container instance ID placeholders with the actual values
          cp /etc/awslogs/awslogs.conf /etc/awslogs/awslogs.conf.bak
          sed -i -e "s/{cluster}/$cluster/g" /etc/awslogs/awslogs.conf
          sed -i -e "s/{container_instance_id}/$container_instance_id/g" /etc/awslogs/awslogs.conf
          EOF

          --==BOUNDARY==
          Content-Type: text/x-shellscript; charset="us-ascii"
          #!/usr/bin/env bash
          # Write the bootstrap-awslogs systemd unit file to /etc/systemd/system/bootstrap-awslogs.service
          cat > /etc/systemd/system/bootstrap-awslogs.service <<- EOF
          [Unit]
          Description=Bootstrap awslogs agent
          Requires=ecs.service
          After=ecs.service
          Before=awslogsd.service

          [Service]
          Type=oneshot
          RemainAfterExit=yes
          ExecStart=/usr/local/bin/bootstrap-awslogs.sh

          [Install]
          WantedBy=awslogsd.service
          EOF

          --==BOUNDARY==
          Content-Type: text/x-shellscript; charset="us-ascii"
          #!/bin/sh
          chmod +x /usr/local/bin/bootstrap-awslogs.sh
          systemctl daemon-reload
          systemctl enable bootstrap-awslogs.service
          systemctl enable awslogsd.service
          systemctl start awslogsd.service --no-block
          echo "ECS_CLUSTER=${ClusterName}" >> /etc/ecs/ecs.config
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm \
                          aws-cfn-bootstrap
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ContainerInstanceAutoScalingGroup --region ${AWS::Region}
          --==BOUNDARY==--


  # Auto Scaling Group containing the container instances
  ContainerInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      MinSize: "1"
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref ContainerInstanceLaunchConfig
      Tags:
        - Key: Name
          Value: !Sub "ecs-instance-${ClusterName}"
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - Fn::ImportValue: ecsworkshop:PrivateSubnetOne
        - Fn::ImportValue: ecsworkshop:PrivateSubnetTwo
        - Fn::ImportValue: ecsworkshop:PrivateSubnetThree
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 2
        MinSuccessfulInstancesPercent: 100
        PauseTime: PT10M
