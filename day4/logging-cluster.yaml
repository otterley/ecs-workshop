AWSTemplateFormatVersion: 2010-09-09
Description: Create ECS cluster

Parameters:
  ClusterName:
    Description: Cluster name
    Type: String
    AllowedPattern: "^ecs-workshop-user-[0-9]+$"
  EC2InstanceType:
    Type: String
    # We need these to be xlarge so we don't run out of ENIs
    Default: t3a.xlarge
    Description: EC2 instance type
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
    Description: EC2 AMI ID
  ClusterSize:
    Type: Number
    Default: 3
    Description: Number of EC2 instances comprising the ECS cluster

Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref ClusterName

  # Launch configuration for EC2 instances
  ContainerInstanceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 00_install-packages
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        00_install-packages:
          packages:
            rpm:
              amazon-ssm-agent: https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
              amazon-cloudwatch-agent: https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          commands:
            01_enable_ssm_agent:
              command: systemctl enable amazon-ssm-agent
            02_start_ssm_agent:
              command: systemctl start amazon-ssm-agent
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.ContainerInstanceLaunchConfig.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ContainerInstanceLaunchConfig --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      }
                    }
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/dmesg",
                            "log_group_name": "/var/log/dmesg"
                          },
                          {
                            "file_path": "/var/log/messages",
                            "log_group_name": "/var/log/messages",
                            "timestamp_format": "%b %-d %H:%M:%S"
                          },
                          {
                            "file_path": "/var/log/ecs/ecs-init.log",
                            "log_group_name": "/var/log/ecs/ecs-init.log",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                          },
                          {
                            "file_path": "/var/log/ecs/ecs-agent.log.*",
                            "log_group_name": "/var/log/ecs/ecs-agent.log",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                          },
                          {
                            "file_path": "/var/log/ecs/audit.log.*",
                            "log_group_name": "/var/log/ecs/audit.log",
                            "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                          }
                        ]
                      }
                    },
                    "log_stream_name": "{instance_id}"
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
    Properties:
      AssociatePublicIpAddress: false
      IamInstanceProfile:
        Fn::ImportValue: ecsworkshop:EcsInstanceProfile
      ImageId: !Ref ImageId
      InstanceMonitoring: true
      InstanceType: !Ref EC2InstanceType
      SecurityGroups:
        - Fn::ImportValue: ecsworkshop:InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo "ECS_CLUSTER=${ClusterName}" >> /etc/ecs/ecs.config
          yum -y install aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ContainerInstanceLaunchConfig --region ${AWS::Region} --configsets default
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ContainerInstanceAutoScalingGroup --region ${AWS::Region}

  # Auto Scaling Group containing the container instances
  ContainerInstanceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref ClusterSize
      MaxSize: !Ref ClusterSize
      MinSize: "1"
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref ContainerInstanceLaunchConfig
      Tags:
        - Key: Name
          Value: !Sub "ecs-instance-${ClusterName}"
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - Fn::ImportValue: ecsworkshop:PrivateSubnetOne
        - Fn::ImportValue: ecsworkshop:PrivateSubnetTwo
        - Fn::ImportValue: ecsworkshop:PrivateSubnetThree
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 2
        MinSuccessfulInstancesPercent: 100
        PauseTime: PT10M
        WaitOnResourceSignals: true
